/*
1. We can find the root at postorder[], it will be the last element in this array.
2. find the index of root in inorder[], this array tell you the number of nodes in each side of the root
3. find the root of the subtree, use the same way to find it.



*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        return builder(postorder.length-1,0,inorder.length-1,inorder,postorder);
    }
    public TreeNode builder(int postIndex,int inStart, int inEnd, int[]inorder,int[]postorder){
        if(inStart>inEnd)
            return null;
        TreeNode root = new TreeNode(postorder[postIndex]);
        //find index of root in inorder[]
        int index=0;
        for(int i =0;i<postorder.length;i++){
            if(inorder[i]==postorder[postIndex])
                index = i;
        }
        //                   postIndext                 inStart  inEnd    int[]   int[]
        root.right = builder(postIndex-1              , index+1, inEnd   ,inorder,postorder);
        root.left  = builder(postIndex-1-(inEnd-index), inStart, index-1 ,inorder,postorder);
        return root;
    }

}