class Solution {
    public void solve(char[][] board) {
        if(board.length == 0){
            return;
        }
        int m = board[0].length;
        int n = board.length;
        
        //mark the first column and last column (edge)
        for(int i = 0; i < n; i++){
            mark(board, 0, i);
            mark(board, m-1, i);
        }
        
        //mark the first row and last row (edge)
        for(int i = 0; i < m; i++){
            mark(board, i, 0);
            mark(board, i, n-1);
        }
        
        for(int i = 1; i < n-1; i++){
            for(int j = 1; j < m-1; j++){
                if(board[i][j] == 'O'){
                    board[i][j] = 'X';
                }
            }
        }
        
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(board[i][j] == 'Y'){
                    board[i][j] = 'O';
                }
            }
        }
    }
    
    private void mark(char[][] board, int x, int y){
        
        //out side or not target
        if(x < 0 || x > board[0].length-1 || y < 0 || y > board.length-1 || board[y][x] == 'X' || board[y][x] == 'Y'){
            return;
        }
                
        board[y][x] = 'Y';
        mark(board, x-1 ,y);
        mark(board, x+1, y);
        mark(board, x, y-1);
        mark(board, x, y+1);
    }
}