class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        
        int[] status = new int[numCourses]; // 0: unvisit, 1: visiting, 2: visited
        
        // Adjacency list
        List<List<Integer>> adj = new ArrayList<>();
        for(int i = 0 ; i < numCourses; i++){
            adj.add(new ArrayList<>() );
        }
        
        for(int[] e : prerequisites){   // prerequest course ->  adv_course1, adv_course2, adv_course3, ...
            int pre = e[1];             // prerequest course
            int cor = e[0];             // advance course
            adj.get(pre).add(cor);
        }
        
        for(int i = 0; i < numCourses; i++){
            if( dfs(i, status, adj) ){
                return false;
            }
        }
        return true;
    }
    
    //return true if detect circle
    private boolean dfs(int course, int[] status, List<List<Integer>> list){
        if(status[course]==1)   //current node is visiting -> it's a circle
            return true;
        if(status[course]==2)   //this node is save, no need to check
            return false;
        
        status[course] = 1; //set current node to visiting
        
        List<Integer> temp = list.get(course);
        for(Integer i : temp){
            if( dfs(i, status, list) ){
                return false;
            }
        }
        
        status[course] = 2; // after check all of its children, this node is save
        
        return false;
    }
}
