public class Solution {
    static boolean[][] visit;
    public boolean exist(char[][] board, String word) {
        visit = new boolean[board.length][board[0].length];
        for(int i =0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if(search(board,word,i,j,0)&&board[i][j]==word.charAt(0))
                    return true;
            }
        }
        return false;
    }
    
    private boolean search(char[][]board, String word, int i, int j, int index){
        if(index==word.length())
            return true;
        if( i<0 || i>=board.length || j<0 || j>=board[0].length ||         //out of bound
            board[i][j] != word.charAt(index) ||                           //board did not contain this charactor
            visit[i][j]){                                                  // already visit
            return false;
        }
        
        visit[i][j]=true;
        if(search(board, word, i+1, j, index+1) ||                          //search dpwn
           search(board, word, i-1, j, index+1) ||                          //search top
           search(board, word, i, j+1, index+1) ||                          //search right
           search(board, word, i, j-1, index+1) ){                          //search left
            return true;
        }
        
        visit[i][j]=false;
        return false;
    }
}