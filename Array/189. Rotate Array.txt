public class Solution {
    public void rotate(int[] nums, int k) {
        int []r = new int [nums.length];
        k = k % nums.length;
        int i =0;
        while( (i+k)<nums.length){
            r[i+k]=nums[i];
            i++;
        }
        int j=0;
        while(i<nums.length){
            r[j]=nums[i];
            j++;
            i++;
        }
        
        for(int m=0;m<nums.length;m++){
            nums[m]=r[m];
        }
    }
}





*********************************************************************


public void rotate(int[] nums, int k) {
    k %= nums.length;
    reverse(nums, 0, nums.length - 1);
    reverse(nums, 0, k - 1);
    reverse(nums, k, nums.length - 1);
}

public void reverse(int[] nums, int start, int end) {
    while (start < end) {
        int temp = nums[start];
        nums[start] = nums[end];
        nums[end] = temp;
        start++;
        end--;
    }
}


******************************************************************


class Solution {
    public void rotate(int[] nums, int k) {
        if(nums.length==0 || k%nums.length ==0)
            return;
        
        int n = nums.length;
        int[] temp = new int[k];
        k = k % n;
        
        //store the subarray that need to be moved the left side
        for(int i = 0; i < k; i++){
            temp[i] = nums[n-k+i];
        }
        
        //shift the left subarray to right by k
        for(int i = n-k-1; i >=0; i--){
            nums[i+k] = nums[i];
        }
        
        //put the temp array back to the left
        for(int i = 0; i < k; i++){
            nums[i] = temp[i];
        }
    }
}